// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package acme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ACMEClient is the client API for ACME service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACMEClient interface {
	// initiates a challenge.
	Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error)
	Resolution(ctx context.Context, in *ResolutionRequest, opts ...grpc.CallOption) (*ResolutionResponse, error)
}

type aCMEClient struct {
	cc grpc.ClientConnInterface
}

func NewACMEClient(cc grpc.ClientConnInterface) ACMEClient {
	return &aCMEClient{cc}
}

func (c *aCMEClient) Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, "/acme.ACME/Challenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEClient) Resolution(ctx context.Context, in *ResolutionRequest, opts ...grpc.CallOption) (*ResolutionResponse, error) {
	out := new(ResolutionResponse)
	err := c.cc.Invoke(ctx, "/acme.ACME/Resolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMEServer is the server API for ACME service.
// All implementations must embed UnimplementedACMEServer
// for forward compatibility
type ACMEServer interface {
	// initiates a challenge.
	Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error)
	Resolution(context.Context, *ResolutionRequest) (*ResolutionResponse, error)
	mustEmbedUnimplementedACMEServer()
}

// UnimplementedACMEServer must be embedded to have forward compatible implementations.
type UnimplementedACMEServer struct {
}

func (UnimplementedACMEServer) Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}
func (UnimplementedACMEServer) Resolution(context.Context, *ResolutionRequest) (*ResolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolution not implemented")
}
func (UnimplementedACMEServer) mustEmbedUnimplementedACMEServer() {}

// UnsafeACMEServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACMEServer will
// result in compilation errors.
type UnsafeACMEServer interface {
	mustEmbedUnimplementedACMEServer()
}

func RegisterACMEServer(s grpc.ServiceRegistrar, srv ACMEServer) {
	s.RegisterService(&ACME_ServiceDesc, srv)
}

func _ACME_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.ACME/Challenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServer).Challenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACME_Resolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServer).Resolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.ACME/Resolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServer).Resolution(ctx, req.(*ResolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ACME_ServiceDesc is the grpc.ServiceDesc for ACME service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ACME_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "acme.ACME",
	HandlerType: (*ACMEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Challenge",
			Handler:    _ACME_Challenge_Handler,
		},
		{
			MethodName: "Resolution",
			Handler:    _ACME_Resolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acme.proto",
}
