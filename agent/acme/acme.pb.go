// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acme.proto

package acme

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Challenge struct {
	Domain               string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Digest               string   `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_f26972c0e3421552, []int{0}
}

func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Challenge.Unmarshal(m, b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return xxx_messageInfo_Challenge.Size(m)
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Challenge) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *Challenge) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ChallengeRequest struct {
	CSR                  []byte   `protobuf:"bytes,1,opt,name=CSR,proto3" json:"CSR,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChallengeRequest) Reset()         { *m = ChallengeRequest{} }
func (m *ChallengeRequest) String() string { return proto.CompactTextString(m) }
func (*ChallengeRequest) ProtoMessage()    {}
func (*ChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f26972c0e3421552, []int{1}
}

func (m *ChallengeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChallengeRequest.Unmarshal(m, b)
}
func (m *ChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChallengeRequest.Marshal(b, m, deterministic)
}
func (m *ChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeRequest.Merge(m, src)
}
func (m *ChallengeRequest) XXX_Size() int {
	return xxx_messageInfo_ChallengeRequest.Size(m)
}
func (m *ChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeRequest proto.InternalMessageInfo

func (m *ChallengeRequest) GetCSR() []byte {
	if m != nil {
		return m.CSR
	}
	return nil
}

type ChallengeResponse struct {
	Certificate          []byte   `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Authority            []byte   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChallengeResponse) Reset()         { *m = ChallengeResponse{} }
func (m *ChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*ChallengeResponse) ProtoMessage()    {}
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f26972c0e3421552, []int{2}
}

func (m *ChallengeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChallengeResponse.Unmarshal(m, b)
}
func (m *ChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChallengeResponse.Marshal(b, m, deterministic)
}
func (m *ChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeResponse.Merge(m, src)
}
func (m *ChallengeResponse) XXX_Size() int {
	return xxx_messageInfo_ChallengeResponse.Size(m)
}
func (m *ChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeResponse proto.InternalMessageInfo

func (m *ChallengeResponse) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *ChallengeResponse) GetAuthority() []byte {
	if m != nil {
		return m.Authority
	}
	return nil
}

type ResolutionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolutionRequest) Reset()         { *m = ResolutionRequest{} }
func (m *ResolutionRequest) String() string { return proto.CompactTextString(m) }
func (*ResolutionRequest) ProtoMessage()    {}
func (*ResolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f26972c0e3421552, []int{3}
}

func (m *ResolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolutionRequest.Unmarshal(m, b)
}
func (m *ResolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolutionRequest.Marshal(b, m, deterministic)
}
func (m *ResolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolutionRequest.Merge(m, src)
}
func (m *ResolutionRequest) XXX_Size() int {
	return xxx_messageInfo_ResolutionRequest.Size(m)
}
func (m *ResolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolutionRequest proto.InternalMessageInfo

type ResolutionResponse struct {
	Challenge            *Challenge `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ResolutionResponse) Reset()         { *m = ResolutionResponse{} }
func (m *ResolutionResponse) String() string { return proto.CompactTextString(m) }
func (*ResolutionResponse) ProtoMessage()    {}
func (*ResolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f26972c0e3421552, []int{4}
}

func (m *ResolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolutionResponse.Unmarshal(m, b)
}
func (m *ResolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolutionResponse.Marshal(b, m, deterministic)
}
func (m *ResolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolutionResponse.Merge(m, src)
}
func (m *ResolutionResponse) XXX_Size() int {
	return xxx_messageInfo_ResolutionResponse.Size(m)
}
func (m *ResolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolutionResponse proto.InternalMessageInfo

func (m *ResolutionResponse) GetChallenge() *Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func init() {
	proto.RegisterType((*Challenge)(nil), "acme.Challenge")
	proto.RegisterType((*ChallengeRequest)(nil), "acme.ChallengeRequest")
	proto.RegisterType((*ChallengeResponse)(nil), "acme.ChallengeResponse")
	proto.RegisterType((*ResolutionRequest)(nil), "acme.ResolutionRequest")
	proto.RegisterType((*ResolutionResponse)(nil), "acme.ResolutionResponse")
}

func init() { proto.RegisterFile("acme.proto", fileDescriptor_f26972c0e3421552) }

var fileDescriptor_f26972c0e3421552 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x09, 0x2d, 0x95, 0xf2, 0x5a, 0x89, 0xf6, 0x40, 0x10, 0x55, 0x0c, 0x95, 0xc5, 0xc0,
	0x42, 0x87, 0xb2, 0x23, 0x55, 0x11, 0x23, 0x03, 0xee, 0x2f, 0x30, 0xe1, 0x68, 0x2d, 0x52, 0xbb,
	0x24, 0xce, 0xc0, 0x4f, 0xe0, 0x5f, 0xa3, 0x38, 0x2e, 0x09, 0x64, 0xbb, 0xfb, 0xf2, 0xf2, 0xde,
	0xd3, 0x19, 0x50, 0xd9, 0x9e, 0x97, 0x87, 0xc2, 0x3a, 0x4b, 0xc3, 0x7a, 0x16, 0x2f, 0x88, 0xd3,
	0x9d, 0xca, 0x73, 0x36, 0x5b, 0xa6, 0x2b, 0x8c, 0xde, 0xec, 0x5e, 0x69, 0x93, 0x44, 0x8b, 0xe8,
	0x2e, 0x96, 0x61, 0xf3, 0x5c, 0x6f, 0xb9, 0x74, 0xc9, 0x69, 0xe0, 0x7e, 0xa3, 0x4b, 0x9c, 0x39,
	0xfb, 0xc1, 0x26, 0x19, 0x78, 0xdc, 0x2c, 0xe2, 0x16, 0xd3, 0x5f, 0x4b, 0xc9, 0x9f, 0x55, 0xad,
	0x9c, 0x62, 0x90, 0x6e, 0xa4, 0xb7, 0x9d, 0xc8, 0x7a, 0x14, 0x1b, 0xcc, 0x3a, 0xaa, 0xf2, 0x60,
	0x4d, 0xc9, 0xb4, 0xc0, 0x38, 0xe3, 0xc2, 0xe9, 0x77, 0x9d, 0x29, 0xc7, 0x41, 0xde, 0x45, 0x74,
	0x83, 0x58, 0x55, 0x6e, 0x67, 0x0b, 0xed, 0xbe, 0x7c, 0x9b, 0x89, 0x6c, 0x81, 0xb8, 0xc0, 0x4c,
	0x72, 0x69, 0xf3, 0xca, 0x69, 0x6b, 0x42, 0xb6, 0x48, 0x41, 0x5d, 0x18, 0xa2, 0xee, 0x11, 0x67,
	0xc7, 0x7c, 0x1f, 0x34, 0x5e, 0x9d, 0x2f, 0xfd, 0x79, 0xda, 0x5a, 0xad, 0x62, 0xf5, 0x1d, 0x61,
	0xb8, 0x4e, 0x9f, 0x9f, 0xe8, 0xf1, 0xcf, 0xc1, 0xfe, 0xff, 0xd1, 0x44, 0xce, 0xaf, 0x7b, 0xbc,
	0x49, 0x15, 0x27, 0xb4, 0x06, 0xda, 0x36, 0x14, 0x84, 0xbd, 0xd2, 0xf3, 0xa4, 0xff, 0xe1, 0x68,
	0xf1, 0x3a, 0xf2, 0x0f, 0xf8, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff, 0xba, 0xd1, 0xa2, 0x6e, 0xce,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ACMEClient is the client API for ACME service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ACMEClient interface {
	// initiates a challenge.
	Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error)
	Resolution(ctx context.Context, in *ResolutionRequest, opts ...grpc.CallOption) (*ResolutionResponse, error)
}

type aCMEClient struct {
	cc *grpc.ClientConn
}

func NewACMEClient(cc *grpc.ClientConn) ACMEClient {
	return &aCMEClient{cc}
}

func (c *aCMEClient) Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, "/acme.ACME/Challenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCMEClient) Resolution(ctx context.Context, in *ResolutionRequest, opts ...grpc.CallOption) (*ResolutionResponse, error) {
	out := new(ResolutionResponse)
	err := c.cc.Invoke(ctx, "/acme.ACME/Resolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACMEServer is the server API for ACME service.
type ACMEServer interface {
	// initiates a challenge.
	Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error)
	Resolution(context.Context, *ResolutionRequest) (*ResolutionResponse, error)
}

func RegisterACMEServer(s *grpc.Server, srv ACMEServer) {
	s.RegisterService(&_ACME_serviceDesc, srv)
}

func _ACME_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.ACME/Challenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServer).Challenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ACME_Resolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACMEServer).Resolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acme.ACME/Resolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACMEServer).Resolution(ctx, req.(*ResolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ACME_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acme.ACME",
	HandlerType: (*ACMEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Challenge",
			Handler:    _ACME_Challenge_Handler,
		},
		{
			MethodName: "Resolution",
			Handler:    _ACME_Resolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acme.proto",
}
