// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeploymentsClient is the client API for Deployments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentsClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Deployments_UploadClient, error)
	Deploy(ctx context.Context, in *DeployCommandRequest, opts ...grpc.CallOption) (*DeployCommandResult, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Deployments_LogsClient, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Deployments_WatchClient, error)
	// TODO: drop dispatch from deployments, believe it should be internal.
	Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error)
}

type deploymentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentsClient(cc grpc.ClientConnInterface) DeploymentsClient {
	return &deploymentsClient{cc}
}

func (c *deploymentsClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Deployments_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deployments_ServiceDesc.Streams[0], "/agent.Deployments/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentsUploadClient{stream}
	return x, nil
}

type Deployments_UploadClient interface {
	Send(*UploadChunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type deploymentsUploadClient struct {
	grpc.ClientStream
}

func (x *deploymentsUploadClient) Send(m *UploadChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deploymentsUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentsClient) Deploy(ctx context.Context, in *DeployCommandRequest, opts ...grpc.CallOption) (*DeployCommandResult, error) {
	out := new(DeployCommandResult)
	err := c.cc.Invoke(ctx, "/agent.Deployments/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/agent.Deployments/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Deployments_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deployments_ServiceDesc.Streams[1], "/agent.Deployments/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentsLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployments_LogsClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type deploymentsLogsClient struct {
	grpc.ClientStream
}

func (x *deploymentsLogsClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentsClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Deployments_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deployments_ServiceDesc.Streams[2], "/agent.Deployments/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentsWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deployments_WatchClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type deploymentsWatchClient struct {
	grpc.ClientStream
}

func (x *deploymentsWatchClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentsClient) Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error) {
	out := new(DispatchResponse)
	err := c.cc.Invoke(ctx, "/agent.Deployments/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentsServer is the server API for Deployments service.
// All implementations must embed UnimplementedDeploymentsServer
// for forward compatibility
type DeploymentsServer interface {
	Upload(Deployments_UploadServer) error
	Deploy(context.Context, *DeployCommandRequest) (*DeployCommandResult, error)
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	Logs(*LogRequest, Deployments_LogsServer) error
	Watch(*WatchRequest, Deployments_WatchServer) error
	// TODO: drop dispatch from deployments, believe it should be internal.
	Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error)
	mustEmbedUnimplementedDeploymentsServer()
}

// UnimplementedDeploymentsServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentsServer struct {
}

func (UnimplementedDeploymentsServer) Upload(Deployments_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDeploymentsServer) Deploy(context.Context, *DeployCommandRequest) (*DeployCommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedDeploymentsServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedDeploymentsServer) Logs(*LogRequest, Deployments_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedDeploymentsServer) Watch(*WatchRequest, Deployments_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedDeploymentsServer) Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedDeploymentsServer) mustEmbedUnimplementedDeploymentsServer() {}

// UnsafeDeploymentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentsServer will
// result in compilation errors.
type UnsafeDeploymentsServer interface {
	mustEmbedUnimplementedDeploymentsServer()
}

func RegisterDeploymentsServer(s grpc.ServiceRegistrar, srv DeploymentsServer) {
	s.RegisterService(&Deployments_ServiceDesc, srv)
}

func _Deployments_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeploymentsServer).Upload(&deploymentsUploadServer{stream})
}

type Deployments_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadChunk, error)
	grpc.ServerStream
}

type deploymentsUploadServer struct {
	grpc.ServerStream
}

func (x *deploymentsUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deploymentsUploadServer) Recv() (*UploadChunk, error) {
	m := new(UploadChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Deployments_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Deployments/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Deploy(ctx, req.(*DeployCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Deployments/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentsServer).Logs(m, &deploymentsLogsServer{stream})
}

type Deployments_LogsServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type deploymentsLogsServer struct {
	grpc.ServerStream
}

func (x *deploymentsLogsServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployments_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentsServer).Watch(m, &deploymentsWatchServer{stream})
}

type Deployments_WatchServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type deploymentsWatchServer struct {
	grpc.ServerStream
}

func (x *deploymentsWatchServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Deployments_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Deployments/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Dispatch(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployments_ServiceDesc is the grpc.ServiceDesc for Deployments service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployments_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Deployments",
	HandlerType: (*DeploymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _Deployments_Deploy_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Deployments_Cancel_Handler,
		},
		{
			MethodName: "Dispatch",
			Handler:    _Deployments_Dispatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Deployments_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _Deployments_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Deployments_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}

// QuorumClient is the client API for Quorum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuorumClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (Quorum_UploadClient, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Quorum_WatchClient, error)
	Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error)
	Deploy(ctx context.Context, in *DeployCommandRequest, opts ...grpc.CallOption) (*DeployCommandResult, error)
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
}

type quorumClient struct {
	cc grpc.ClientConnInterface
}

func NewQuorumClient(cc grpc.ClientConnInterface) QuorumClient {
	return &quorumClient{cc}
}

func (c *quorumClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Quorum_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quorum_ServiceDesc.Streams[0], "/agent.Quorum/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &quorumUploadClient{stream}
	return x, nil
}

type Quorum_UploadClient interface {
	Send(*UploadChunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type quorumUploadClient struct {
	grpc.ClientStream
}

func (x *quorumUploadClient) Send(m *UploadChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quorumUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quorumClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Quorum_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Quorum_ServiceDesc.Streams[1], "/agent.Quorum/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &quorumWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Quorum_WatchClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type quorumWatchClient struct {
	grpc.ClientStream
}

func (x *quorumWatchClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quorumClient) Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error) {
	out := new(DispatchResponse)
	err := c.cc.Invoke(ctx, "/agent.Quorum/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quorumClient) Deploy(ctx context.Context, in *DeployCommandRequest, opts ...grpc.CallOption) (*DeployCommandResult, error) {
	out := new(DeployCommandResult)
	err := c.cc.Invoke(ctx, "/agent.Quorum/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quorumClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/agent.Quorum/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quorumClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/agent.Quorum/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuorumServer is the server API for Quorum service.
// All implementations must embed UnimplementedQuorumServer
// for forward compatibility
type QuorumServer interface {
	Upload(Quorum_UploadServer) error
	Watch(*WatchRequest, Quorum_WatchServer) error
	Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error)
	Deploy(context.Context, *DeployCommandRequest) (*DeployCommandResult, error)
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	mustEmbedUnimplementedQuorumServer()
}

// UnimplementedQuorumServer must be embedded to have forward compatible implementations.
type UnimplementedQuorumServer struct {
}

func (UnimplementedQuorumServer) Upload(Quorum_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedQuorumServer) Watch(*WatchRequest, Quorum_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedQuorumServer) Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedQuorumServer) Deploy(context.Context, *DeployCommandRequest) (*DeployCommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedQuorumServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedQuorumServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedQuorumServer) mustEmbedUnimplementedQuorumServer() {}

// UnsafeQuorumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuorumServer will
// result in compilation errors.
type UnsafeQuorumServer interface {
	mustEmbedUnimplementedQuorumServer()
}

func RegisterQuorumServer(s grpc.ServiceRegistrar, srv QuorumServer) {
	s.RegisterService(&Quorum_ServiceDesc, srv)
}

func _Quorum_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuorumServer).Upload(&quorumUploadServer{stream})
}

type Quorum_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadChunk, error)
	grpc.ServerStream
}

type quorumUploadServer struct {
	grpc.ServerStream
}

func (x *quorumUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quorumUploadServer) Recv() (*UploadChunk, error) {
	m := new(UploadChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Quorum_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuorumServer).Watch(m, &quorumWatchServer{stream})
}

type Quorum_WatchServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type quorumWatchServer struct {
	grpc.ServerStream
}

func (x *quorumWatchServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Quorum_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuorumServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Quorum/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuorumServer).Dispatch(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quorum_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuorumServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Quorum/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuorumServer).Deploy(ctx, req.(*DeployCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quorum_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuorumServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Quorum/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuorumServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quorum_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuorumServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Quorum/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuorumServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quorum_ServiceDesc is the grpc.ServiceDesc for Quorum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quorum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Quorum",
	HandlerType: (*QuorumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Quorum_Dispatch_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Quorum_Deploy_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Quorum_Info_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Quorum_Cancel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Quorum_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Quorum_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Info(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Agent_LogsClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Info(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/agent.Agent/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Agent_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/agent.Agent/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_LogsClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type agentLogsClient struct {
	grpc.ClientStream
}

func (x *agentLogsClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Info(context.Context, *StatusRequest) (*StatusResponse, error)
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	Logs(*LogRequest, Agent_LogsServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedAgentServer) Info(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedAgentServer) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedAgentServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedAgentServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedAgentServer) Logs(*LogRequest, Agent_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Info(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Agent/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).Logs(m, &agentLogsServer{stream})
}

type Agent_LogsServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type agentLogsServer struct {
	grpc.ServerStream
}

func (x *agentLogsServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Agent_Connect_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Agent_Info_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Agent_Deploy_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Agent_Cancel_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Agent_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _Agent_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationClient interface {
	TLSUpdate(ctx context.Context, in *TLSUpdateRequest, opts ...grpc.CallOption) (*TLSUpdateResponse, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) TLSUpdate(ctx context.Context, in *TLSUpdateRequest, opts ...grpc.CallOption) (*TLSUpdateResponse, error) {
	out := new(TLSUpdateResponse)
	err := c.cc.Invoke(ctx, "/agent.Configuration/TLSUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
// All implementations must embed UnimplementedConfigurationServer
// for forward compatibility
type ConfigurationServer interface {
	TLSUpdate(context.Context, *TLSUpdateRequest) (*TLSUpdateResponse, error)
	mustEmbedUnimplementedConfigurationServer()
}

// UnimplementedConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (UnimplementedConfigurationServer) TLSUpdate(context.Context, *TLSUpdateRequest) (*TLSUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TLSUpdate not implemented")
}
func (UnimplementedConfigurationServer) mustEmbedUnimplementedConfigurationServer() {}

// UnsafeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServer will
// result in compilation errors.
type UnsafeConfigurationServer interface {
	mustEmbedUnimplementedConfigurationServer()
}

func RegisterConfigurationServer(s grpc.ServiceRegistrar, srv ConfigurationServer) {
	s.RegisterService(&Configuration_ServiceDesc, srv)
}

func _Configuration_TLSUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).TLSUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Configuration/TLSUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).TLSUpdate(ctx, req.(*TLSUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Configuration_ServiceDesc is the grpc.ServiceDesc for Configuration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configuration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TLSUpdate",
			Handler:    _Configuration_TLSUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

// ObserverClient is the client API for Observer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObserverClient interface {
	Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error)
}

type observerClient struct {
	cc grpc.ClientConnInterface
}

func NewObserverClient(cc grpc.ClientConnInterface) ObserverClient {
	return &observerClient{cc}
}

func (c *observerClient) Dispatch(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchResponse, error) {
	out := new(DispatchResponse)
	err := c.cc.Invoke(ctx, "/agent.Observer/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObserverServer is the server API for Observer service.
// All implementations must embed UnimplementedObserverServer
// for forward compatibility
type ObserverServer interface {
	Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error)
	mustEmbedUnimplementedObserverServer()
}

// UnimplementedObserverServer must be embedded to have forward compatible implementations.
type UnimplementedObserverServer struct {
}

func (UnimplementedObserverServer) Dispatch(context.Context, *DispatchRequest) (*DispatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedObserverServer) mustEmbedUnimplementedObserverServer() {}

// UnsafeObserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObserverServer will
// result in compilation errors.
type UnsafeObserverServer interface {
	mustEmbedUnimplementedObserverServer()
}

func RegisterObserverServer(s grpc.ServiceRegistrar, srv ObserverServer) {
	s.RegisterService(&Observer_ServiceDesc, srv)
}

func _Observer_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObserverServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Observer/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObserverServer).Dispatch(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Observer_ServiceDesc is the grpc.ServiceDesc for Observer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Observer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Observer",
	HandlerType: (*ObserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Observer_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}

// BootstrapClient is the client API for Bootstrap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapClient interface {
	Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error)
}

type bootstrapClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapClient(cc grpc.ClientConnInterface) BootstrapClient {
	return &bootstrapClient{cc}
}

func (c *bootstrapClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error) {
	out := new(ArchiveResponse)
	err := c.cc.Invoke(ctx, "/agent.Bootstrap/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapServer is the server API for Bootstrap service.
// All implementations must embed UnimplementedBootstrapServer
// for forward compatibility
type BootstrapServer interface {
	Archive(context.Context, *ArchiveRequest) (*ArchiveResponse, error)
	mustEmbedUnimplementedBootstrapServer()
}

// UnimplementedBootstrapServer must be embedded to have forward compatible implementations.
type UnimplementedBootstrapServer struct {
}

func (UnimplementedBootstrapServer) Archive(context.Context, *ArchiveRequest) (*ArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (UnimplementedBootstrapServer) mustEmbedUnimplementedBootstrapServer() {}

// UnsafeBootstrapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServer will
// result in compilation errors.
type UnsafeBootstrapServer interface {
	mustEmbedUnimplementedBootstrapServer()
}

func RegisterBootstrapServer(s grpc.ServiceRegistrar, srv BootstrapServer) {
	s.RegisterService(&Bootstrap_ServiceDesc, srv)
}

func _Bootstrap_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Bootstrap/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServer).Archive(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bootstrap_ServiceDesc is the grpc.ServiceDesc for Bootstrap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bootstrap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Bootstrap",
	HandlerType: (*BootstrapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Archive",
			Handler:    _Bootstrap_Archive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
