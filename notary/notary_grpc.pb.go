// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package notary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotaryClient is the client API for Notary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotaryClient interface {
	Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*GrantResponse, error)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Notary_SearchClient, error)
}

type notaryClient struct {
	cc grpc.ClientConnInterface
}

func NewNotaryClient(cc grpc.ClientConnInterface) NotaryClient {
	return &notaryClient{cc}
}

func (c *notaryClient) Grant(ctx context.Context, in *GrantRequest, opts ...grpc.CallOption) (*GrantResponse, error) {
	out := new(GrantResponse)
	err := c.cc.Invoke(ctx, "/notary.Notary/Grant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) Revoke(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/notary.Notary/Revoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/notary.Notary/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notaryClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (Notary_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notary_ServiceDesc.Streams[0], "/notary.Notary/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &notarySearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notary_SearchClient interface {
	Recv() (*SearchResponse, error)
	grpc.ClientStream
}

type notarySearchClient struct {
	grpc.ClientStream
}

func (x *notarySearchClient) Recv() (*SearchResponse, error) {
	m := new(SearchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotaryServer is the server API for Notary service.
// All implementations must embed UnimplementedNotaryServer
// for forward compatibility
type NotaryServer interface {
	Grant(context.Context, *GrantRequest) (*GrantResponse, error)
	Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	Search(*SearchRequest, Notary_SearchServer) error
	mustEmbedUnimplementedNotaryServer()
}

// UnimplementedNotaryServer must be embedded to have forward compatible implementations.
type UnimplementedNotaryServer struct {
}

func (UnimplementedNotaryServer) Grant(context.Context, *GrantRequest) (*GrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grant not implemented")
}
func (UnimplementedNotaryServer) Revoke(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedNotaryServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedNotaryServer) Search(*SearchRequest, Notary_SearchServer) error {
	return status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedNotaryServer) mustEmbedUnimplementedNotaryServer() {}

// UnsafeNotaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotaryServer will
// result in compilation errors.
type UnsafeNotaryServer interface {
	mustEmbedUnimplementedNotaryServer()
}

func RegisterNotaryServer(s grpc.ServiceRegistrar, srv NotaryServer) {
	s.RegisterService(&Notary_ServiceDesc, srv)
}

func _Notary_Grant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Grant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notary.Notary/Grant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Grant(ctx, req.(*GrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notary.Notary/Revoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Revoke(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotaryServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notary.Notary/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotaryServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notary_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotaryServer).Search(m, &notarySearchServer{stream})
}

type Notary_SearchServer interface {
	Send(*SearchResponse) error
	grpc.ServerStream
}

type notarySearchServer struct {
	grpc.ServerStream
}

func (x *notarySearchServer) Send(m *SearchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Notary_ServiceDesc is the grpc.ServiceDesc for Notary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notary.Notary",
	HandlerType: (*NotaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Grant",
			Handler:    _Notary_Grant_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _Notary_Revoke_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Notary_Refresh_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _Notary_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notary.proto",
}

// SyncClient is the client API for Sync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncClient interface {
	Stream(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Sync_StreamClient, error)
}

type syncClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncClient(cc grpc.ClientConnInterface) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Stream(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Sync_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[0], "/notary.Sync/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sync_StreamClient interface {
	Recv() (*SyncStream, error)
	grpc.ClientStream
}

type syncStreamClient struct {
	grpc.ClientStream
}

func (x *syncStreamClient) Recv() (*SyncStream, error) {
	m := new(SyncStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncServer is the server API for Sync service.
// All implementations must embed UnimplementedSyncServer
// for forward compatibility
type SyncServer interface {
	Stream(*SyncRequest, Sync_StreamServer) error
	mustEmbedUnimplementedSyncServer()
}

// UnimplementedSyncServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServer struct {
}

func (UnimplementedSyncServer) Stream(*SyncRequest, Sync_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedSyncServer) mustEmbedUnimplementedSyncServer() {}

// UnsafeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServer will
// result in compilation errors.
type UnsafeSyncServer interface {
	mustEmbedUnimplementedSyncServer()
}

func RegisterSyncServer(s grpc.ServiceRegistrar, srv SyncServer) {
	s.RegisterService(&Sync_ServiceDesc, srv)
}

func _Sync_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServer).Stream(m, &syncStreamServer{stream})
}

type Sync_StreamServer interface {
	Send(*SyncStream) error
	grpc.ServerStream
}

type syncStreamServer struct {
	grpc.ServerStream
}

func (x *syncStreamServer) Send(m *SyncStream) error {
	return x.ServerStream.SendMsg(m)
}

// Sync_ServiceDesc is the grpc.ServiceDesc for Sync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notary.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Sync_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notary.proto",
}
