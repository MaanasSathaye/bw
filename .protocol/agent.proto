syntax = "proto3";

package agent;

option go_package = "github.com/james-lawrence/agent";

message Archive {
  bytes deploymentID = 1;
  Peer peer = 2;
  string location = 3;
  bytes checksum = 4;
  int64 ts = 5;  // unix timestamp marking the time the archive was created.
  int64 dts = 7; // marks the time the archive was deployed.
  string initiator = 6;
}

message PeerMetadata {
  bytes capability = 1;
  int32 Status = 6;
  uint32 P2PPort = 9;
}

message Peer {
  enum State {
    Node = 0;
    Client = 2;
    Gone = 3;
  }
  State Status = 1;
  string ip = 2;
  string name = 3;
  uint32 P2PPort = 10;
  bytes PublicKey = 11;
}

message TLSEvent {
  string fingerprint = 1;
  bytes Authority = 2;
  bytes Key = 3;
  bytes Certificate = 4;
}

message WALPreamble {
  int32 Major = 1;
  int32 Minor = 2;
  int32 Patch = 3;
}

// Represents every message sent between nodes. effectively describes all
// possible events we may want to act upon.
message Message {
  enum NodeEvent {
    Joined = 0;
    Departed = 1;
  }
  enum Type {
    PeerEvent = 0;
    LogEvent = 1;
    DeployCommandEvent = 2;
    DeployEvent = 3;
    PeersFoundEvent = 4;
    PeersCompletedEvent = 5;
    TLSEvent = 7;
  }

  string id = 9;
  // used to prevent message's from recording in the WAL.
  bool disallowWAL = 998;
  // used to prevent message's from appearing in observers.
  bool hidden = 999;

  // Identifies which field is filled in.
  Type type = 1;
  Peer peer = 2;
  int64 ts = 3; // unix timestamp.

  oneof Event {
    bool none = 4;
    int64 int = 5;
    Log log = 6;
    DeployCommand deployCommand = 7;
    Deploy deploy = 8;
    NodeEvent membership = 10;
    TLSEvent credentials = 12;
  }
}

// Write ahead log, deprecated.
message WAL { repeated Message messages = 1; }

message DeployOptions {
  // sets the number of simultaneously instance deploys to run.
  int64 concurrency = 2;
  // how long to wait before a single deploy is considered a failure.
  int64 timeout = 3;
  // ignore failures during the deploy.
  bool ignoreFailures = 4;
  // silence the deploy logging.
  bool silenceDeployLogs = 5;
}

message DeployCommand {
  enum Command {
    Begin = 0;
    Cancel = 1;
    Done = 2;
    Failed = 3;
    Restart = 4;
  }
  Command command = 1;
  Archive archive = 2;
  string initiator = 3;
  DeployOptions options = 5;
}

message Deploy {
  enum Stage {
    Failed = 0;
    Deploying = 1;
    Completed = 2;
  }
  Stage stage = 1;
  Archive archive = 2;
  DeployOptions options = 4;
  string error = 3;
}

message DeployCommandRequest {
  Archive archive = 1;
  DeployOptions options = 5;
  repeated Peer peers = 4;
}
message DeployCommandResult {}

message Log { string log = 1; }

message UploadMetadata {
  uint64 bytes = 1;
  string initiator = 2;
}

message UploadChunk {
  bytes data = 1;
  bytes checksum = 2;
  oneof initialChunkMetadata {
    bool none = 3;
    UploadMetadata metadata = 4;
  }
}

message UploadResponse { Archive archive = 1; }

message WatchRequest {}
message DispatchResponse {}

message InfoRequest {}
message InfoResponse {
  enum Mode {
    None = 0;
    Deploying = 1;
  }
  Mode mode = 1;
  DeployCommand deploying = 2;
  DeployCommand deployed = 3;
  Peer leader = 4;
  repeated Peer quorum = 5;
}

// Deployments service public facing endpoints for deployments.
service Deployments {
  rpc Upload(stream UploadChunk) returns (UploadResponse) {}
  rpc Deploy(DeployCommandRequest) returns (DeployCommandResult) {}
  rpc Cancel(CancelRequest) returns (CancelResponse) {}
  rpc Logs(LogRequest) returns (stream LogResponse) {}
  rpc Watch(WatchRequest) returns (stream Message) {}
  // TODO: drop dispatch from deployments, believe it should be internal.
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
}

service Quorum {
  rpc Upload(stream UploadChunk) returns (UploadResponse) {}
  rpc Watch(WatchRequest) returns (stream Message) {}
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
  rpc Deploy(DeployCommandRequest) returns (DeployCommandResult) {}
  rpc Info(InfoRequest) returns (InfoResponse) {}
  rpc Cancel(CancelRequest) returns (CancelResponse) {}
}

message ConnectRequest {}
message ConnectResponse { repeated Peer quorum = 2; }

message StatusRequest {}
message StatusResponse {
  Peer peer = 1;
  repeated Deploy deployments = 4;
}

message DeployRequest {
  Archive archive = 1;
  DeployOptions options = 2;
}

message DeployResponse { Deploy deploy = 1; }

message ShutdownRequest {}
message ShutdownResponse {}

message CancelRequest { string initiator = 1; }

message CancelResponse {}

message LogRequest {
  bytes deploymentID = 1;
  Peer peer = 2;
}

message LogResponse { bytes content = 1; }

service Agent {
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}
  rpc Info(StatusRequest) returns (StatusResponse) {}
  rpc Deploy(DeployRequest) returns (DeployResponse) {}
  rpc Cancel(CancelRequest) returns (CancelResponse) {}
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
  rpc Logs(LogRequest) returns (stream LogResponse) {}
}

message TLSUpdateRequest { TLSEvent creds = 1; }

message TLSUpdateResponse {}

service Configuration {
  rpc TLSUpdate(TLSUpdateRequest) returns (TLSUpdateResponse) {}
}

message DispatchRequest { repeated Message messages = 1; }

service Observer {
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
}

message ArchiveRequest {}
message ArchiveResponse {
  enum Info {
    None = 0;
    ActiveDeploy = 1;
  }
  Info info = 1;
  Deploy deploy = 2;
}

service Bootstrap {
  rpc Archive(ArchiveRequest) returns (ArchiveResponse) {}
}

// ClusterEvents an in memory service for dealing with events that occur within
// the cluster.
message ClusterWatchRequest {}
message ClusterWatchEvents {
  enum Event {
    Joined = 0;
    Depart = 1;
    Update = 2;
  }

  Event event = 1;
  Peer node = 2;
}

service Cluster {
  rpc Watch(ClusterWatchRequest) returns (stream ClusterWatchEvents) {}
}