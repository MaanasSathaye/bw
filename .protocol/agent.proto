syntax = "proto3";
package agent;

// Deployment Event.
message Message {
  enum Type { PeerEvent = 0; LogEvent = 1; DeployEvent = 2; PeersFoundEvent = 3; PeersCompletedEvent = 4;}

  // Identifies which field is filled in.
  Type type = 1;
  Peer peer = 2;
  int64 ts = 3; // unix timestamp.

  oneof Event {
    // One of the following will be filled in.
    bool none = 4;
    int64 int = 5;
    Log log = 6;
    Deploy deploy = 7;
  }
}

message Deploy {
  enum Stage { Initiated = 0; Failed = 1; Completed = 2;}
  Stage stage = 1;
  Archive archive = 2;
}

message Log {
  string log = 1;
}

message UploadMetadata {
  uint64 bytes = 1;
}

message ArchiveChunk {
  bytes data = 1;
  bytes checksum = 2;
  oneof initialChunkMetadata {
    bool none = 3;
    UploadMetadata metadata = 4;
  }
}

message ArchiveResult {}
message Archive {
  bytes deploymentID = 1;
  Peer peer = 2;
  string location = 3;
  bytes checksum = 4;
  int64 ts = 5; // unix timestamp.
}

message StatusRequest {}
message Status {
  Peer Peer = 1;
  repeated Archive Deployments = 2;
}

message DetailsRequest{}
message Details {
  bytes secret = 1;
  repeated Peer Quorum = 2;
  repeated Archive Deployments = 3;
}

message ConnectRequest {}
message ConnectInfo {
  bytes secret = 1;
  repeated Peer Quorum = 2;
}

message Peer {
  enum State { Unknown = 0; Ready = 1; Canary = 2; Deploying = 3; Failed = 4; Left = 5;}
  State Status = 1;
  string ip = 2;
  string name = 3;
  uint32 RPCPort = 4;
  uint32 RaftPort = 5;
  uint32 SWIMPort = 6;
}

message WatchRequest {}
message RecordResponse {}

service Quorum {
  rpc Upload(stream ArchiveChunk) returns (Archive) {}
  rpc Watch(WatchRequest) returns (stream Message) {}
  rpc Dispatch(stream Message) returns (RecordResponse) {}
}

service Agent {
  rpc Connect(ConnectRequest) returns (ConnectInfo) {}
  rpc Deploy(Archive) returns (ArchiveResult) {}
  rpc Info(StatusRequest) returns (Status) {}
}
